plugins {
    id 'java'
    id 'org.jetbrains.intellij.platform' version '2.0.1'
    id 'distribution'
}


apply from: 'config.gradle'

group 'com.xiaobaicai.plugin'
version "$rootProject.ext.plugin.version"

sourceCompatibility = 21
targetCompatibility = 21

import org.jetbrains.intellij.platform.gradle.TestFrameworkType
repositories {
    mavenCentral()

    // IntelliJ Platform Gradle Plugin Repositories Extension - read more: https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-repositories-extension.html
    intellijPlatform {
        defaultRepositories()
    }
}


dependencies {
    implementation project(":plugin-core")
    implementation project(path: ':plugin-agent', configuration: 'shadow')
    implementation rootProject.ext.dependencies["hutool-all"]
    annotationProcessor rootProject.ext.dependencies["lombok"]
    compileOnly rootProject.ext.dependencies["lombok"]
    testAnnotationProcessor rootProject.ext.dependencies["lombok"]
    testCompileOnly rootProject.ext.dependencies["lombok"]
    // 单测
    testCompileOnly rootProject.ext.dependencies["junit"]
    testImplementation rootProject.ext.dependencies["junit.jupiter.api"]
    testImplementation rootProject.ext.dependencies["junit.jupiter.engine"]

    // IntelliJ Platform Gradle Plugin Dependencies Extension - read more: https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-dependencies-extension.html
    intellijPlatform {
        bundledPlugin 'com.intellij.java'

        def type = providers.gradleProperty('platformType')
        def version = providers.gradleProperty('platformVersion')
        create(type, version)

        pluginVerifier()
        zipSigner()
        instrumentationTools()

        testFramework TestFrameworkType.Platform.INSTANCE
    }
}

// Configure IntelliJ Platform Gradle Plugin - read more: https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-extension.html
intellijPlatform {
    buildSearchableOptions = false
    instrumentCode = true
    projectName = project.name
    pluginConfiguration {
        name = providers.gradleProperty("pluginName")
        version = providers.gradleProperty("pluginVersion")

        ideaVersion {
            sinceBuild = providers.gradleProperty("pluginSinceBuild")
            untilBuild = providers.gradleProperty("pluginUntilBuild")
        }
    }
    publishing {
        token = providers.environmentVariable("pluginToken")
    }

    pluginVerification {
        ides {
            local '/Applications/IntelliJ IDEA.app'
            recommended()
        }
    }
}

runIde {
    jvmArgs '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED'
}


test {
    useJUnitPlatform()
}


//所有项目配置
allprojects {
    group 'com.xiaobaicai.plugin'
    version "$rootProject.ext.plugin.version"

    apply plugin: 'idea'
    apply plugin: 'java'

    sourceCompatibility = 21
    targetCompatibility = 21
}

//所有子项目的通用配置
subprojects {
    //仓库地址
    repositories {
        mavenLocal()
        mavenCentral()
    }

    //公用依赖
    dependencies {
        // 全局依赖
        implementation rootProject.ext.dependencies["hutool-all"]
        implementation rootProject.ext.dependencies["byte-buddy"]
        implementation rootProject.ext.dependencies["byte-buddy-agent"]
        implementation rootProject.ext.dependencies["slf4j"]
        annotationProcessor rootProject.ext.dependencies["lombok"]
        compileOnly rootProject.ext.dependencies["lombok"]
        testAnnotationProcessor rootProject.ext.dependencies["lombok"]
        testCompileOnly rootProject.ext.dependencies["lombok"]
        // 单测
        testCompileOnly rootProject.ext.dependencies["junit"]
        testImplementation rootProject.ext.dependencies["junit.jupiter.api"]
        testImplementation rootProject.ext.dependencies["junit.jupiter.engine"]
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task packAllTwice() {
    dependsOn(':plugin-agent:packAgent')
    dependsOn(':assemble')
}